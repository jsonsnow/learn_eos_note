{\rtf1\ansi\ansicpg936\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Basics of EOSIO Smart contract\
Communication Model\
EOSIO Smart Contracts communcate with each other in the form of action and shared memory database access\
\
There are two communication modes that can be defined within a contract\
Inline:inline is graranteed to execute with the current transaction or unwind,no notifaction will be commuincated regardless of success of failur
\f1 ,inline operates with the same scopes and authorities with the same scopes and authorities the original transaction had
\f0 \
Deferred:defer
\f1 \'a3\'a8\'d1\'d3\'b3\'d9\'a3\'a9will get scheduled later at producer\'a1\'afs discretion,\
\
Action vc Transaction\
A action represents a single operation, whereas a transaction is a collection of one or more actions, A contract and a account communicate in the form of actions, Action can be sent individually\
\
Action Name Restrictions\
Action types are actually base32 encoded 64-bit integers,so it character a-z,1-5 and \'a1\'ae.\'a1\'af\
\
\
Transaction Confirmation\
Receving a transaction hash code not mean that the transaction has been confirmed,it only means that the node accepted it without error,\
By means of confirmation, you should see the transaction in the transaction history with the block number of which it is inculded\
\
Smart contract files\
To keep things simple we have created a tool called eosiocpp which can be used to bootstrap(\'d2\'fd\'b5\'bc) a new contract\
eosiocpp -n $\{contract\} 
\f0 \
\
Create a wallet\
cleos wallet create\
cleos wallet unlock\
\
All new blockchains start out with a master key for the sole initial account, eosio,
\f1 \'b8\'c4
\f0 private key
\f1 \'bb\'e1\'d7\'d4\'b6\'af\'b5\'bc\'c8\'eb\'b5\'bd\'b4\'b4\'bd\'a8\'b5\'c4\'c7\'ae\'b0\'fc\'d6\'d0\'c8\'a5
\f0 \
cleos wallet import key\
\
loading Contract\
Cleos set contract eosio(
\f1 \'d5\'cb\'bb\'a7
\f0 ) build/contracts/eosio.bios
\f1 \'a3\'a8\'ce\'bb\'d6\'c3\'a3\'a9-p eosio \'a3\'a8\'d3\'c3\'cb\'ad\'c0\'b4\'c7\'a9\'c3\'fb\'a3\'a9\
\
The last argument to this call was -p eosio. This tell cleos to sign this action with active authority of eosio account,sgin the action using the private key for the eosio account that we omported earlier\
\
Any time you execute a transcation you will see output link\
Exectue transaction: xxxxxxxxxxx\
# eosio <= eosio:setcode\
# eosio <= eosio:setabi\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs28 \cf0 Creating Accounts\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf0 We will create two account ,usr and tester ,and we will need to associate a key with each account ,int this example ,the same key will be used for both accounts\
\
Create key\
Cleos create key\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf2 \cb3 \CocoaLigature0 Private key: 5JDsZrmK9Hz58nEbf7BKWySr59guorH2s3NFUb8rScJZJdBjD9X\
Public key: EOS6ABzLg7sHrokxSKXKne2ZoY1RgCRwKWRDCjtXHHFVUYwHqC96n\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \cb1 \CocoaLigature1 \
Create Two user Accounts\
Cleos craete account eosio user 
\f2\fs22 \cf2 \cb3 \CocoaLigature0 EOS6ABzLg7sHrokxSKXKne2ZoY1RgCRwKWRDCjtXHHFVUYwHqC96n EOS6ABzLg7sHrokxSKXKne2ZoY1RgCRwKWRDCjtXHHFVUYwHqC96n\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
#         eosio <= eosio::newaccount            \{"creator":"eosio","name":"user","owner":\{"threshold":1,"keys":[\{"key":"EOS6ABzLg7sHrokxSKXKne2ZoY1R...\
\
cleos create account eosio user EOS6ABzLg7sHrokxSKXKne2ZoY1RgCRwKWRDCjtXHHFVUYwHqC96n EOS6ABzLg7sHrokxSKXKne2ZoY1RgCRwKWRDCjtXHHFVUYwHqC96n\
\
Note:the careate account subcommand requires two keys ,one for the Ownerkey and one for the ActiveKey,in this tutorail example the same key is used for both
\f1\fs24 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Because we are using the eosio::account_history_api_plugin we can query all accounts that are controlled by our key\
Cleos get accounts [Public key],:\'cd\'a8\'b9\'fdkey\'b2\'e9\'d1\'af\'b9\'dc\'c0\'ed\'d5\'cb\'bb\'a7\
Cleos get account [NAME]\'a3\'ba\'cd\'a8\'b9\'fd\'c3\'fb\'d7\'d6\'b2\'e9\'d1\'af\'d5\'cb\'bb\'a7\
\
\'ce\'aa\'c4\'b3\'b8\'f6\'d5\'cb\'bb\'a7\'b2\'bf\'ca\'f0\'ba\'cf\'d4\'bc\
cleos create account eosio eosio.token [key]\
\'b2\'bf\'ca\'f0\'ba\'cf\'d4\'bc\'b5\'bdeosio.token \'d5\'cb\'bb\'a7\'cf\'c2\'a3\'ac\'b2\'a2\'cd\'a8\'b9\'fdeosio.ken\'c7\'a9\'c3\'fb\
\'d6\'bb\'d3\'d0\'b0\'d1\'ba\'cf\'d4\'bc\'b2\'bf\'ca\'f0\'c1\'cb\'b2\'c5\'c4\'dc\'b5\'f7\'d3\'c3\'cf\'e0\'b9\'d8\'b5\'c4\'ba\'af\'ca\'fd\
\'bc\'b4\'a3\'bacleos push action eosio.token create(function) [argument] -p \
Cleos set contract eosio.token build/contract/eosio.token -p eosio.toekn\
Create the EOS Token\
You can view the interface to eosio.token as defined by constract/eosio.token/eosio.token.hpp\
\
To create a new token we must call the create(\'a1\'ad) action with the proper(\'d5\'fd\'c8\'b7\'b5\'c4) arguments\
.This command will use the symbol of the maximum supply to uniquely this token form other tokens\'a3\'a8\'cd\'a8\'b9\'fdmaximum_supply \'b2\'ce\'ca\'fd\'c0\'b4\'c7\'f8\'b1\'f0\'c6\'e4\'cb\'fbtokens\'a3\'a9\
cleos push action eosio.token\'a3\'a8\'ba\'cf\'d4\'bc\'b5\'d8\'d6\'b7\'a3\'a9 create (action) \'a1\'ae[\'a1\'b0eosio\'a1\'b1:\'a1\'b110000000.0000 EOS\'a1\'b1,0,0,0]\'a1\'af\
Or cleos push action eosio.token create \'a1\'ae\{\'a1\'b0issuer\'a1\'b1:\'a1\'b1eosio\'a1\'b1,\'a1\'b1maximun_supply\'a1\'b1:\'a1\'b110000000.000 EOS\'a1\'b1,\'a1\'b1can_freeze\'a1\'b1:0,\'a1\'b1can_recall\'a1\'b1:0,\'a1\'b1can_whitelist\'a1\'b1:0\}\'a1\'af\
\
\
\
Issue(\'c1\'f7\'b3\'f6) Tokens to Account \'a1\'aeUser\'a1\'af\
Now that we have created the token,the issuer can issue new tokens to the account user we create earlier\
\
Deploy Exchange Contract\
Similar to the example shown above ,we can deploy the exchange contract,the exchange contract provides capabilities to create and trade currency\
Cleos create account eosio exchange  
\f2\fs22 \cf2 \cb3 \CocoaLigature0 EOS6ABzLg7sHrokxSKXKne2ZoY1RgCRwKWRDCjtXHHFVUYwHqC96n\
\
Cleos set contract exchange build/contracts/exchange -p exhcange\
\
Deploy Eosio.msig Contract\
The eosio.msig contract allows mulitple parties to sign transaction asynchronously\
EOSIO has multi-signature support at a base level ,but it requires a synch side channel where data is ferried Eosio.msig is a more user friendly(
\f1 \'d3\'d1\'ba\'c3\'b5\'c4
\f2 ) way of asyn proposing\

\f1\fs24 \cf0 \cb1 \CocoaLigature1 \
cleos create account eosio eoio.msig 
\f2\fs22 \cf2 \cb3 \CocoaLigature0 EOS6ABzLg7sHrokxSKXKne2ZoY1RgCRwKWRDCjtXHHFVUYwHqC96n\
Cleos set contract eoio.msig build/contracts/eosio.msig -p eosio.msig\
\
eos dawn 2.0;
\f1 \'ca\'b9\'d3\'c3
\f2 store_str
\f1 \'a3\'ac\'d2\'d4\'d7\'d6\'b7\'fb\'b4\'ae\'ce\'aa\'cb\'f7\'d2\'fd\'a3\'ac\'b1\'a3\'b4\'e6\'bd\'e1\'b9\'b9\'cc\'e5\'b5\'c4\'b9\'a6\'c4\'dc\'a3\'ac\'b5\'ab\'ca\'c7\'d4\'da3.0\'b0\'e6\'b1\'be\'a3\'ac\'b8\'c3\'b9\'a6\'c4\'dc\'d4\'dd\'ca\'b1\'c9\'be\'b3\'fd\'a3\'ac\'c4\'bf\'c7\'b0\'cd\'a8\'b9\'fdmulti_index\'c8\'dd\'c6\'f7\
\
multi_index\
eos dawn 3.0\'d6\'d0\'b5\'c4multi_index,\'ca\'b9\'d3\'c3\'b7\'bd\'b7\'a8\'ba\'cdboost\'d6\'d0\'b5\'c4multi_index,\'b7\'c7\'b3\'a3\'c0\'e0\'cb\'c6\'a3\'ac\'be\'cd\'ca\'c7\'b6\'e0\'d6\'d8\'cb\'f7\'d2\'fd\'b5\'c4\'c8\'dd\'c6\'f7\'a3\'ac\
typedef eosio::multi_index<tablename,typename>table(code,scope)\
\
tablename::\'b8\'c3table\'b5\'c4\'c3\'fb\'b3\'c6\
typename:\'b8\'c3\'c8\'dd\'c6\'f7\'b4\'e6\'b4\'a2\'b5\'c4\'bd\'e1\'b9\'b9\'cc\'e5\
code\'a3\'ba\'b1\'be\'ba\'cf\'d4\'bc\'b5\'c4\'c3\'fb\'b3\'c6\'a3\'ac\'c0\'fd\'c8\'e7N(tests);\
scope:\'ca\'fd\'be\'dd\'b4\'e6\'b4\'a2\'b5\'c4\'d5\'cb\'bb\'a7\'c3\'fb\
\'b6\'e0\'bc\'b6\'cb\'f7\'d2\'fd\'c8\'e7\'cf\'c2\'c9\'f9\'c3\'f7\
typedef eosio::multi_index<tablename ,typename,index_by><scope,const_mem_fun><typename,index_type,typename::method>>table(code,scope)\
\'b5\'ab\'ca\'c7\'a3\'ac\'c4\'bf\'c7\'b0\'b6\'fe\'bc\'b6\'cb\'f7\'d2\'fd\'a3\'ac\'d6\'bb\'d6\'a7\'b3\'d6uint64_t,uint128_t,key256\'a3\'a8eosio\'b5\'c4\'c4\'da\'bd\'a8\'c0\'e0\'d0\'cd\'a3\'a9\
\'cd\'ea\'b3\'c9\'c9\'ea\'c3\'f7\'ba\'f3\'a3\'ac\'bf\'c9\'d2\'d4\'ca\'b9\'d3\'c3\'d2\'bb\'cf\'c2\'b9\'a6\'c4\'dc\
table.emplace(scope,[&](auto& g)\{\'a1\'ad.\})\'a3\'ac\'cc\'ed\'bc\'d3\'ca\'fd\'be\'dd\
table.find(primary_key):\'d3\'c3\'b9\'d8\'bb\'fa\'d7\'d6\'b2\'e9\'d5\'d2\
table.modify(itr,scope,[&](auto & g)\{\'a1\'ad.\}),\'d0\'de\'b8\'c4\'ca\'fd\'be\'dd\
table.erase(itr)\'c9\'be\'b3\'fd\
table.begin()\'ca\'fd\'be\'dd\'c6\'f0\'ca\'bc\
table.end()\'ca\'fd\'be\'dd\'c4\'a9\'ce\'b2\
\
bios contract \
this contract enable you have direct control over the resource allocation(\'b7\'d6\'c5\'e4) of other accounts and access(\'b7\'c3\'ce\'ca) other  privilege(\'cb\'bd\'d3\'d0) api callss ,in a public blockchain,this contract will manager the stakng(\'b1\'ea\'bd\'e7) and unstaking of tokens to reserve(\'b1\'a3\'c1\'f4) bandwidth(\'bf\'ed\'b4\'f8) for CPU and network activity and memory for contracts\
\
$\{executor\} <= $\{contract\}:$\{action\} $\{args\'a1\'ad\}\

\fs24 \cf0 \cb1 \CocoaLigature1 cleos set contract eosio xxx - p eosio\
the last argument to this call was -p eosio,this tells cleos to sigin this action with the active authority of the eosio account,i.e to sigin the action using the private key of the eosio account that we imported earlier\'a3\'a8\'c7\'a9\'c3\'fb\'ca\'c7\'bf\'c9\'d1\'a1\'b5\'c4\'a3\'a9\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \cf2 \cb3 \CocoaLigature0 before we can deploy the token contract we must create an account to deploy it to (\'ba\'cf\'d4\'bc\'ca\'c7\'b2\'bf\'ca\'f0\'d4\'da\'d5\'cb\'ba\'c5\'cf\'c2\'c3\'e6)\
\
eosio.token\'ba\'cf\'d4\'bc\
\'cc\'e1\'b9\'a9\'c1\'cbcreate(account_name issuer,asset maximum_suplly,uint8_t canfreeze,uint8_t can_recall,uint8_t can whitelist);\
void issue(account_name to,asset quantity ,string memo);\
void transfer(account_name from account_name to,asset quantity string memo);\
\'d7\'a2\'d2\'e2\'a3\'ba\'d6\'bb\'d3\'d0issuer\'d3\'d0\'c8\'a8\'cf\'de\'bd\'f8\'d0\'d0issue\'a3\'a8\'c1\'f7\'b3\'f6\'a3\'acor perform other actions as freezing recalling and whitelisting of owners\'a3\'a9;\
\
c++\'c3\'fc\'c3\'fb\'bf\'d5\'bc\'e4\'d3\'ef\'b7\'a8\
name space \{\
\
\}\
using space::xxx,\'b5\'a5\'b6\'c0\'ca\'b9\'d3\'c3space\'cf\'c2\'b5\'c4xxx\'a3\'ac\
using namespace space\'a3\'bb\'c8\'ab\'b2\'bf\'ca\'b9\'d3\'c3
\fs24 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\'c7\'ae\'b0\'fc\'c3\'dc\'c2\'eb\'a3\'ba\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf2 \cb3 \CocoaLigature0 PW5KHjSvR7eYrmAsCmrVL7U7TwDVB8ofPUSYN6Lh4wi5iTR2o9iyF\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \'b4\'b4\'bd\'a8\'b5\'c4\'b5\'da\'d2\'bb\'b6\'d3key(\'b9\'dc\'c0\'eduser\'ba\'cdester)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 Private key: 5JDsZrmK9Hz58nEbf7BKWySr59guorH2s3NFUb8rScJZJdBjD9X\
Public key: EOS6ABzLg7sHrokxSKXKne2ZoY1RgCRwKWRDCjtXHHFVUYwHqC96n\
\
<<<<<<< HEAD
\f1 \'ce\'d2\'d3\'eb\'d0\'bb\'c0\'cf\'ca\'a6\'b5\'c4
\f2 key\
Private key: 5JJAhJTX3riFkkLWHi5uAyMiY2ZQiXnGYnQfFjt3xMWRQpH2yLY\
Public key: EOS5d2dnwTJ5gU6iJz6wdFX4haz5bZfbwv5NmULAk1fGQbVZx2KZ3\
=======\
persistence api\
\
How to create You EOSIO Multi-index Table\
\
1.Define your object(s) using C++ or struct,Each object will be in its own Multi-index table.\
\
2.Define a const member function in the class/struct called primary_key that returns the uint64_t primary key values of you object\
\
3.Determint the scondary indices, Up to 16 additional indices are supported,A secondary index supports serval key types,listed below\
idx64\
idx128\
idx256\
idx_double\
idx_long_double\
\
4.Define a key extractor for each secondary index,the key extractor is afunction used to obatin the keys from the elments of the multi-index table.\
\
const_iterator emplace(uint64_t payer,Lambda&&constructor)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \'b2\'e5\'c8\'eb\'d2\'bb\'b8\'f6\'d4\'aa\'cb\'d8\'a3\'ac\'cd\'a8\'b9\'fd
\f2 Lambda
\f1 \'b9\'b9\'d4\'ec
\f2 \
payer,account name of the payer for Storage usage of the new object,(
\f1 \'c4\'c7\'b8\'f6\'d3\'c3\'bb\'a7\'ce\'aa\'b4\'e6\'b4\'a2\'d0\'c2\'b5\'c4\'b6\'d4\'cf\'f3\'d6\'a7\'b8\'b6
\f2 )\
\

\f1 \'b7\'b5\'bb\'d8\'d6\'b5\'ce\'aa\'d2\'bb\'b8\'f6
\f2  primary key\
\

\f1 \'c7\'b0\'cc\'e1\'cc\'f5\'bc\'fe
\f2 \
payer is a valid account that authorized the current action(and thus allowed to be billed for storage usage)\
\

\f1 \'d2\'ec\'b3\'a3\'a3\'a8Exceptions\'a3\'a9\
the current receiver is not the account that owns the table(the code of multi_index)\
\
Get\
Const object_type & get (uint64_t primary) const: Retrieves an existion object from a table using its primary key\
\
Primary primary key value of the object\
\
Returns :a constant reference to the object containing the specified primary key\
\
Exceptions No object mathes the given key\
\
Find \'d3\'ebget\'c0\'e0\'cb\'c6 \'b2\'bb\'b9\'fd\'b7\'b5\'bb\'d8\'d6\'b5\'ca\'c7\'d2\'bb\'b8\'f6iterator \
\
Modify\
Void modify(const_iterator itr,uint64_t payer,Lambda && updater),:Modifies an existing object in a table\
\
Void modify(const object_type &obj,uint64_t payer,lambda&&updater)\
\
Payer, account name of the payer for the Storage usage of the updated row;a value of 0 indicates that the payer of the modified row is the same as the exsting payer.\
Precondition\
Itr points to ,or obj is an existing object in the table\
\
Payer is a valid account that authorized the current action(and thus allowed to be billed for storage usage)\
\
Postcondtion\
The payer is charged for the storage usage of the updated object,\
If payer is the same as the existing payer,payer only pays for the usage differnce between existing and updated object(\'c8\'e7\'b9\'fb\'d5\'e2\'b8\'f6\'b2\'ee\'d6\'b5\'ca\'c7\'b8\'ba\'ca\'fd\'a3\'ac\'be\'cd\'bb\'e1\'b5\'c3\'b5\'bd\'cd\'cb\'bf\'ee)\
\
if payer is different from the existing payer,the existing payer is refunded for teh storage usage of the existing object\
\
Exceptions\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 \
\
>>>>>>> c896fe4bd3f0373cf9ce72bd558733e2961785ed\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \cb1 \CocoaLigature1 \'b4\'ed\'ce\'f3\'bc\'af\'ba\'cf\
build eos \'b5\'c4\'ca\'b1\'ba\'f2\'cc\'e1\'ca\'be\'d4\'dausr/local\'cf\'c2\'ce\'de\'c8\'a8\'cf\'de\'b2\'d9\'d7\'f7\'a3\'ac\'bc\'d3\'c9\'cfsudo\'a3\'ac\'cc\'e1\'ca\'be brew\'b2\'bb\'c4\'dc\'d4\'d9root\'c8\'a8\'cf\'de\'cf\'c2\'b2\'d9\'d7\'f7\'a3\'ac\'b2\'a2\'c7\'d2\
/usr/local can no longer be chown\'a1\'afn in high Sierra, insteat use \
Sudo chown -R $\{whoami\} $\{brew \'a1\'aaprefix\} /*\
\
Could not find a package configuratio file provided by LLVM\
Export LLVM_DIR=/usr/local/Cellar/lccm/4.0.0.1/lib/cmake\
\
Failed to find Gettext libintl (missing: Intl_INCLUDE_DIR) Call Stack (most recent call first):\
\
\'cd\'a8\'b9\'fd\'a3\'babrew link gettext \'a1\'aaforce\'c3\'fc\'c1\'ee}